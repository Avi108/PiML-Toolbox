.. Places parent toc into the sidebar

:parenttoc: True

.. include:: ../../includes/big_toc_css.rst

======================================
Data Quality
======================================

The data quality module focuses on identifying and addressing data outliers after the data preparation step.  The analysis results can help users locate and remove outliers, enhancing the quality and reliability of subsequent modeling tasks.


Methodology
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Four distinct outlier detection methods are provided, including Isolation Forest, Cluster-Based Local Outlier Factor, Principal Component Analysis, and KmeansTree.


Isolation Forest
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
This algorithm adopts a unique approach to isolate observations by following a random selection process [Liu2008]_. It begins by randomly choosing a feature from the dataset and then selecting a split value for that feature within the range of its maximum and minimum values. This process is repeated recursively to construct isolation trees, until the node has only one instance, or all data at the node have the same values.

The algorithm measures the anomaly score based on the average path length required to isolate each observation. Outliers are expected to have shorter average path lengths, indicating they are easier to separate from the rest of the data. In contrast, normal observations will require longer paths for isolation. The randomness in feature and split value selection contributes to the algorithm's efficiency and ability to handle high-dimensional datasets. It does not rely on the specific distribution of the data, making it suitable for various types of data and outlier detection tasks. Note that the `IsolationForest`_ in PiML is a wrapper of sklearn's implementation `sklearn.ensemble.IsolationForest`_.

.. _sklearn.ensemble.IsolationForest: https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html

.. _IsolationForest: ../../modules/generated/piml.data.outlier_detection.IsolationForest.html

Cluster-Based Local Outlier Factor (CBLOF)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
This method for outlier detection is based on cluster analysis, originally proposed by [He2003]_. The process can be divided into the following steps:

- Partition the data into clusters using K-means or Gaussian mixture model. Clusters can be classified into two categories, namely large clusters and small clusters, based on the size of each cluster. The size of a cluster is determined by the number of points it contains, and a given threshold is utilized for this classification.

- Calculate the CBLOF score for each sample.

    - For samples belonging to large clusters, compute the Euclidean distance between each sample and its corresponding cluster centroid. This distance represents the outlier score for samples within large clusters.
    - For samples belonging to small clusters, calculate the Euclidean distance between each sample and the centroid of the nearest large cluster. This distance serves as the outlier score for samples within small clusters.

- Multiplication by Cluster Size (optional): By default, the outlier score is not multiplied by the cluster size. However, if desired, the outlier score can be multiplied by the cluster size to emphasize the impact of outliers within larger clusters.

This method effectively utilizes the characteristics of clusters to detect outliers. The score calculation considers both the distances within a cluster and the relative distances to neighboring clusters. By combining these factors, the CBLOF score provides a comprehensive measure for identifying and quantifying outliers in the dataset. See more API details in CBLOF_.

.. _CBLOF: ../../modules/generated/piml.data.outlier_detection.CBLOF.html

Principal Component Analysis
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
In addition to the clustering-based methods, dimensionality reduction techniques like Principal Component Analysis (PCA) can also be utilized for outlier detection. In PiML, there are two PCA-based methods for calculating the outlier score: Mahalanobis distance and error reconstruction, as elaborated in PCA_.

- **Mahalanobis distance**: This method computes the distance between each data point and the centroid of the dataset, taking into account the covariance structure of the data. The Mahalanobis distance accounts for correlations between variables and provides a measure of how far each data point deviates from the overall centroid. The Mahalanobis distance can be got easily with PCA under the formula, see [Shyu2003]_ for details.

.. math::
    MD(x)^2 = \sum z_{i}^{2} / \lambda_{i},

where :math:`z_{i}` are the :math:`i`-th principal component scores, and :math:`\lambda_{i}` is the :math:`i`-th eigenvalue of the covariance matrix which can be explained as the variance. But this is precisely the sum of squared distances in the transformed PCA space, which gives us the desired result.

- **Error reconstruction**: This method utilizes the reconstruction error obtained from reconstructing each data point using the principal components. The reconstruction error quantifies the dissimilarity between the original data point and its reconstructed representation. Higher reconstruction errors indicate potential outliers. 

In PiML, the reconstruction is performed by fitting an XGBoost model between the principal components and the covariates. This model is then used to reconstruct the covariates :math:`X_{new}`. The difference between the original covariates and the reconstructed data is calculated as the reconstruction error, i.e., :math:`X - X_{new}`. Finally, we also calculate the Mahalanobis distance of the reconstruction error as the final outlier score, to account for the correlations among reconstruction error. If the reconstruction errors of each feature are mutually independent, the outlier score reduces to mean squared reconstruction error.

.. _PCA: ../../modules/generated/piml.data.outlier_detection.PCA.html

KmeansTree
"""""""""""""""""""""""""""""""""
This method is proposed by the PiML authors, it combines the advantages of the cluster-based method and PCA-based method. The algorithm follows the steps outlined below:

- Iterative K-means Clustering: The dataset is split iteratively using the K-means clustering algorithm with K set to 2. This process continues until certain conditions are met, such as reaching the maximum depth, the maximum number of levels, or a specific distributional distance threshold between two child leaves.

- PCA Error Reconstruction-based Outlier Detection: This step is the same as the algorithm described in the PCA-based method above, but it is performed for each cluster separately.

The KmeansTree method takes advantage of the splitting behavior of the K-means clustering algorithm and the dimensionality reduction capabilities of PCA. By combining these techniques and utilizing the Mahalanobis distance, it aims to effectively detect outliers in the data. The KmeansTree approach can enhance outlier detection performance by increasing the homogeneity of the data after clustering. For further details, please refer to the KMeansTree_ module in PiML.

.. _KMeansTree: ../../modules/generated/piml.data.outlier_detection.KMeansTree.html



Analysis and Comparison
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
This subsection briefly introduces the usage of outlier detection methods in PiML. The function name is `data_quality_check`. The key parameters include:

- `method`: The outlier detection method to be used, which needs to be an instance of IsolationForest_, CBLOF_, PCA_, or KMeansTree_.

- `show`: The type of analysis to be performed. 

- `threshold`: The threshold to decide whether a sample is an outlier.

Outlier Score distribution
""""""""""""""""""""""""""""""""
Here is an example of displaying the score distribution of the PCA-based outlier detection method. The keyword of this plot is "score_distribution". The parameter `threshold` is used to decide whether a sample is an outlier, which is the quantile of the outlier score of all samples, within 0 and 1.

.. jupyter-input::

    from piml.data.outlier_detection import PCA
    exp.data_quality_check(method=PCA(), show='score_distribution', threshold=0.999)

.. figure:: ../../auto_examples/data/images/sphx_glr_plot_4_data_quality_001.png
   :target: ../../auto_examples/data/plot_4_data_quality.html
   :align: left

In this plot, the red dotted line represents the actual threshold of the outlier scores. Samples with outlier scores greater than this threshold are classified as outliers. 

Marginal Distribution of Outliers
""""""""""""""""""""""""""""""""""""
Here is an example of displaying the marginal distribution of detected outliers against a feature of interest. The keyword of this plot is "marginal_outlier_distribution".

.. jupyter-input::

    from piml.data.outlier_detection import PCA
    exp.data_quality_check(method=PCA(), show='marginal_outlier_distribution', threshold=0.999)

.. figure:: ../../auto_examples/data/images/sphx_glr_plot_4_data_quality_002.png
   :target: ../../auto_examples/data/plot_4_data_quality.html
   :align: left

In this plot, a circle mark is used to indicate the presence of outliers. Although many of the outliers may fall within the normal range of individual features, they are still considered outliers in the context of the multivariate feature space. This phenomenon highlights the importance of considering the relationships and interactions between multiple features when identifying outliers.

Comparison of Different Methods
""""""""""""""""""""""""""""""""""""
We use t-SNE to reduce the dimension of data to 2D for better visualization. Below is an example of comparing different methods, and the keyword of this plot is "tsne_comparison".

.. jupyter-input::

    from piml.data.outlier_detection import PCA, CBLOF
    exp.data_quality_check(method=[PCA(), CBLOF()], show='tsne_comparison', threshold=[0.999, 0.999])

.. figure:: ../../auto_examples/data/images/sphx_glr_plot_4_data_quality_003.png
   :target: ../../auto_examples/data/plot_4_data_quality.html
   :align: left

It is worth noting that, to mitigate the computational burden, the t-SNE algorithm used for visualization purposes is fitted using subsampled data. This subsampling technique allows for a representative subset of the data to be used, reducing the complexity of the t-SNE computation while still providing meaningful insights. In the plot mentioned above, the visualization reveals that the outliers detected by the two algorithms under comparison are noticeably distinct from each other. This discrepancy suggests that the algorithms may consider different aspects of the data when identifying outliers.


Examples
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The full example codes of this section can be found in the following link.

.. topic:: Example

    * :ref:`sphx_glr_auto_examples_data_plot_4_data_quality.py`

.. topic:: References

    .. [Liu2008] Fei Tony Liu, Kai Ming Ting, Zhi-Hua Zhou (2008). `Isolation Forest <https://ieeexplore.ieee.org/abstract/document/4781136>`_, 2008 Eighth IEEE International Conference on Data Mining, Pisa, Italy, 2008, pp. 413-422, doi: 10.1109/ICDM.2008.17.

    .. [He2003] Zengyou He, Xiaofei Xu, Shengchun Deng (2003). `Discovering cluster-based local outliers <https://www.sciencedirect.com/science/article/abs/pii/S0167865503000035>`_, Pattern recognition letters, 24(9-10), 1641-1650.

    .. [Shyu2003] Mei-Ling Shyu, Shu-Ching Chen, Kanoksri Sarinnapakorn, LiWu Chang (2003). `A novel anomaly detection scheme based on principal component classifier <https://homepages.laas.fr/owe/METROSEC/DOC/FDM03.pdf>`_, Miami Univ Coral Gables Fl Dept of Electrical and Computer Engineering.