.. Places parent toc into the sidebar

:parenttoc: True

.. include:: ../../includes/big_toc_css.rst

======================================
Data Preparation
======================================

In this section, I will introduce the data preparation module of PiML. In data preparing function, you are allowed
to set the detailed config of the model training procedure, including task configs like target variable, task type, and sample_weight.
And there is the data split setting such as split method, split ratio, and random seed in the data preparing setting to decide how to split data for the experiment.
Besides the setting, you can also get train test data distance results.

This section introduces the data preparation module of PiML. In this function, you can set the detailed configuration of the model training procedure, including task configurations like target variable, task type, and sample_weight. Further, there is the data split setting such as split method, split ratio, and random seed to decide how to split data for the experiment. Besides the setting, you can also get results on the distances between train test datasets.



Setting
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- **Target variable**: The target variable for training

- **Task type**: PiML supports two different types of tasks, (continuous) regression, and classification or binary regression

- **Sample weight**: variable that defines the sample weights for training

- **Split method**: PiML supports three different kinds of methods for split training and testing datasets.
   
   - random: Random split.
   - outer-sample: Split samples based on Euclidean distance between each sample to the mean center. Choose the samples farthest away from the center as the test samples.
   - kmeans: Split samples based on kmeans cluster method. After training kmeans cluster, set the test ratio of each cluster and do the random split in each cluster.
   - manual: Split samples based on given training and testing sample index.

Here is an example of using the custom sample index to split training testing datasets:

  .. jupyter-input::

      custom_train_idx = np.arange(0,16000)
      custom_test_idx = np.arange(16000, 17379)
      exp.data_prepare(train_idx=custom_train_idx, test_idx=custom_test_idx)

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Config</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th></th>
          <td>Excluded columns</td>
          <td>[]</td>
        </tr>
        <tr>
          <th></th>
          <td>Target variable</td>
          <td>cnt</td>
        </tr>
        <tr>
          <th></th>
          <td>Sample weight</td>
          <td>None</td>
        </tr>
        <tr>
          <th></th>
          <td>Task type</td>
          <td>Regression</td>
        </tr>
        <tr>
          <th></th>
          <td>Split method</td>
          <td>Manual</td>
        </tr>
        <tr>
          <th></th>
          <td>Test ratio</td>
          <td>0.079296</td>
        </tr>
        <tr>
          <th></th>
          <td>Random state</td>
          <td>0</td>
        </tr>
        <tr>
          <th></th>
          <td>Train test energy distance</td>
          <td>0.542358</td>
        </tr>

      </tbody>
    </table>
    </div>
    </div>

Split ratio: Fraction of dataset to be set as the test data. When using kmeans method, it can be set as a list of ratios of each cluster.

Random Seed: The random seed for the random split.



Train-Test Distance 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

After setting the configuration, there is the related train test distance result based on the data split setting. For overall understanding, we use energy distance. The energy distance measures the distance between the empirical distribution functions (EDFs) of two data sets as defined below

.. math::
   ED(X,Y) = \frac{2T}{n^2} - \frac{S}{n} + \frac{1}{n^2} \sum{D(X,X)} + \frac{1}{n^2} \sum{D(Y,Y)}

where n is the total number of observations in both datasets. The first term represents the contribution of cross-dataset distances, the second term represents the average of within-dataset distances, and the last two terms represent the contributions of within-dataset distances for X and Y, respectively. To generalize the distance result, before calculating distance, we use the ordinal encoder for categorical features and 0-1 min max scaler transformation.

Here is a complete example of data preparation:

   .. jupyter-input::

      exp.data_prepare(target='cnt', task_type='Regression', sample_weight=None,
                       split_method='random', test_ratio=0.2, random_state=0)

.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Config</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th></th>
          <td>Excluded columns</td>
          <td>[]</td>
        </tr>
        <tr>
          <th></th>
          <td>Target variable</td>
          <td>cnt</td>
        </tr>
        <tr>
          <th></th>
          <td>Sample weight</td>
          <td>None</td>
        </tr>
        <tr>
          <th></th>
          <td>Task type</td>
          <td>Regression</td>
        </tr>
        <tr>
          <th></th>
          <td>Split method</td>
          <td>Random</td>
        </tr>
        <tr>
          <th></th>
          <td>Test ratio</td>
          <td>0.2</td>
        </tr>
        <tr>
          <th></th>
          <td>Random state</td>
          <td>0</td>
        </tr>
        <tr>
          <th></th>
          <td>Train test energy distance</td>
          <td>0.000586</td>
        </tr>

      </tbody>
    </table>
    </div>
    </div>



Examples
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The full example codes of this section can be found in the following link.

.. topic:: Example

  * :ref:`sphx_glr_auto_examples_data_plot_3_data_prepare.py`

