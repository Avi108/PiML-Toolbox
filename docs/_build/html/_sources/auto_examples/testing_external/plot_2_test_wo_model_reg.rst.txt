
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\testing_external\plot_2_test_wo_model_reg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_testing_external_plot_2_test_wo_model_reg.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_testing_external_plot_2_test_wo_model_reg.py:


Scored Test (Regression)
========================================================
Testing External Models without Model Objects as Input

.. GENERATED FROM PYTHON SOURCE LINES 9-10

Assume we have models fitted outside PiML workflow

.. GENERATED FROM PYTHON SOURCE LINES 10-21

.. code-block:: default

    import numpy as np
    from xgboost import XGBRegressor
    from sklearn.datasets import fetch_california_housing
    from sklearn.model_selection import train_test_split

    data = fetch_california_housing()
    train_x, test_x, train_y, test_y, train_idx, test_idx = train_test_split(data.data, data.target,
                                                                             np.arange(data.data.shape[0]), test_size=0.2)
    xgb2 = XGBRegressor(max_depth=2, n_estimators=100)
    xgb2.fit(train_x, train_y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-3" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,
                 colsample_bylevel=None, colsample_bynode=None,
                 colsample_bytree=None, early_stopping_rounds=None,
                 enable_categorical=False, eval_metric=None, feature_types=None,
                 gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
                 interaction_constraints=None, learning_rate=None, max_bin=None,
                 max_cat_threshold=None, max_cat_to_onehot=None,
                 max_delta_step=None, max_depth=2, max_leaves=None,
                 min_child_weight=None, missing=nan, monotone_constraints=None,
                 n_estimators=100, n_jobs=None, num_parallel_tree=None,
                 predictor=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" checked><label for="sk-estimator-id-3" class="sk-toggleable__label sk-toggleable__label-arrow">XGBRegressor</label><div class="sk-toggleable__content"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,
                 colsample_bylevel=None, colsample_bynode=None,
                 colsample_bytree=None, early_stopping_rounds=None,
                 enable_categorical=False, eval_metric=None, feature_types=None,
                 gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
                 interaction_constraints=None, learning_rate=None, max_bin=None,
                 max_cat_threshold=None, max_cat_to_onehot=None,
                 max_delta_step=None, max_depth=2, max_leaves=None,
                 min_child_weight=None, missing=nan, monotone_constraints=None,
                 n_estimators=100, n_jobs=None, num_parallel_tree=None,
                 predictor=None, random_state=None, ...)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 22-23

Prepare the data for testing 

.. GENERATED FROM PYTHON SOURCE LINES 23-43

.. code-block:: default

    x = data.data
    y = data.target
    task_type = 'regression'
    random_state = 0
    feature_names = data.feature_names
    feature_types = ["numerical", "numerical", "numerical", "numerical" "numerical", "numerical", "numerical", "numerical"] # "categorical" or "numerical"
    target_name = data.target_names[0]
    prediction = xgb2.predict(x)

    data_params = {'x': x,
                   'y': y,
                   'prediction': prediction,
                   'feature_names': feature_names,
                   'feature_types': feature_types,
                   'target_name': target_name,
                   'train_idx': train_idx,
                   'test_idx': test_idx,
                   'task_type': task_type,
                   'random_state': random_state}








.. GENERATED FROM PYTHON SOURCE LINES 44-45

Show the accuracy table 

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: default

    from piml.scored_test import test_accuracy_table
    res = test_accuracy_table(**data_params)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

              MSE     MAE       R2
                              
    Train  0.2586  0.3557   0.8070
    Test   0.2709  0.3669   0.7916
    Gap    0.0123  0.0113  -0.0154




.. GENERATED FROM PYTHON SOURCE LINES 49-50

Plot the prediction residuals against one feature of interest 

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: default

    from piml.scored_test import test_accuracy_residual
    res = test_accuracy_residual(**data_params, show_feature='MedInc', figsize=(6, 5))




.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_001.png
   :alt: Residual Plot
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-55

Run weakspot test to detect weak regions

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    from piml.scored_test import test_weakspot
    res = test_weakspot(**data_params, slice_features=['MedInc'], figsize=(6, 5))




.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_002.png
   :alt: Weak Regions
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-60

Run overfit test to detect overfit regions

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    from piml.scored_test import test_overfit
    res = test_overfit(**data_params, slice_features=['MedInc'], figsize=(6, 5))




.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_003.png
   :alt: Overfit Regions
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 64-65

Run reliability test to show the average coverage of prediction intervals 

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default

    from piml.scored_test import test_reliability_table
    res = test_reliability_table(**data_params, alpha=0.1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      Empirical Coverage Average Bandwidth
    0             0.8843            1.4041




.. GENERATED FROM PYTHON SOURCE LINES 69-70

Run reliability test to show the distributional distance between reliable and unreliable samples. 

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default

    from piml.scored_test import test_reliability_distance
    res = test_reliability_distance(**data_params, alpha=0.1, threshold=1.1, figsize=(6, 5))




.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_004.png
   :alt: Distribution Shift: Unreliable vs. Remaining Regions
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 74-75

Run reliability test to show relationship between prediction interval width and the feature of interest 

.. GENERATED FROM PYTHON SOURCE LINES 75-80

.. code-block:: default

    from piml.scored_test import test_reliability_marginal
    res = test_reliability_marginal(**data_params, alpha=0.1, threshold=1.1, show_feature='MedInc',
                                    bins=10, figsize=(6, 5))





.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_005.png
   :alt: Segmented Bandwidth
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-82

Run resilience test to show how model performance changes under distributional shift.

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default

    from piml.scored_test import test_resilience_perf
    res = test_resilience_perf(**data_params, figsize=(6, 5))





.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_006.png
   :alt: Resilience Test
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-88

Run resilience test to show the distributional distance between worst samples and remaining samples.

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: default

    from piml.scored_test import test_resilience_distance
    res = test_resilience_distance(**data_params, figsize=(6, 5))




.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_007.png
   :alt: Distribution Shift: 10%-Worst vs Remaining
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-93

Run resilience test to show how model performance changes under distributional shift (density plot).

.. GENERATED FROM PYTHON SOURCE LINES 93-97

.. code-block:: default

    from piml.scored_test import test_resilience_shift_density
    res = test_resilience_shift_density(**data_params, alpha=0.3, metric='MAE', show_feature='MedInc',
                                        figsize=(6, 5))




.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_008.png
   :alt: Distribution Shift: 30%-Worst vs Remaining
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-99

Run resilience test to show how model performance changes under distributional shift (histogram plot).

.. GENERATED FROM PYTHON SOURCE LINES 99-101

.. code-block:: default

    from piml.scored_test import test_resilience_shift_histogram
    res = test_resilience_shift_histogram(**data_params, alpha=0.3, metric='MAE', show_feature='MedInc')



.. image-sg:: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_009.png
   :alt: Distribution Shift: 30%-Worst vs Remaining
   :srcset: /auto_examples/testing_external/images/sphx_glr_plot_2_test_wo_model_reg_009.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  10.214 seconds)

**Estimated memory usage:**  24 MB


.. _sphx_glr_download_auto_examples_testing_external_plot_2_test_wo_model_reg.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/selfexplainml/piml-toolbox/main?urlpath=lab/tree/./docs/_build/html/notebooks/auto_examples/testing_external/plot_2_test_wo_model_reg.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_2_test_wo_model_reg.py <plot_2_test_wo_model_reg.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_2_test_wo_model_reg.ipynb <plot_2_test_wo_model_reg.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
